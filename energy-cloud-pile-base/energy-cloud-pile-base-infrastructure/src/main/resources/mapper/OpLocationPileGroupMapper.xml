<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.autel.cloud.pile.base.infrastructure.mapper.OpLocationPileGroupMapper">

    <select id="findRemovePileSns" resultType="java.lang.String">
        select pile_sn from  op_location_pile_group_associate where group_id =#{groupId} and deleted = 0
        <if test="set != null and set.size > 0" >
            and pile_sn not in
            <foreach collection="set" item="item" open ="(" close =")"  separator=",">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="findRemoveSubGroupIds" resultType="java.lang.Long">
        select id from  op_location_pile_group where pid =#{pid} and merchant_id = #{merchantId} and deleted = 0
        <if test="set != null and set.size > 0" >
        and id not in
        <foreach collection="set" item="item" open ="(" close =")"  separator=",">
            #{item}
        </foreach>
        </if>
    </select>

    <update id="updatePidByIds">
         update op_location_pile_group set pid=#{pid} , group_type=#{normalGroupType} where id in
         <foreach collection="set" item="id" open ="(" close =")"  separator=",">
            #{id}
         </foreach>
    </update>

    <update id="updateBatch">
        update op_location_pile_group
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="pid =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    when id = #{item.id}
                    then #{item.pid}
                </foreach>
            </trim>
            <trim prefix="updated_at =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    when id = #{item.id}
                    then #{item.updatedAt}
                </foreach>
            </trim>
            <trim prefix="deleted =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.deleted !=null ">
                        when id = #{item.id}
                        then #{item.deleted}
                    </if>
                </foreach>
            </trim>
            <trim prefix="status =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.status !=null ">
                        when id = #{item.id}
                        then #{item.status}
                    </if>
                </foreach>
            </trim>
            <trim prefix="note =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.note !=null ">
                        when id = #{item.id}
                        then #{item.note}
                    </if>
                </foreach>
            </trim>
            <trim prefix="name =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.name !=null ">
                        when id = #{item.id}
                        then #{item.name}
                    </if>
                </foreach>
            </trim>
            <trim prefix="use_smart_charging =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.useSmartCharging !=null ">
                        when id = #{item.id}
                        then #{item.useSmartCharging}
                    </if>
                </foreach>
            </trim>
            <trim prefix="charging_up =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.chargingUp !=null ">
                        when id = #{item.id}
                        then #{item.chargingUp}
                    </if>
                </foreach>
            </trim>
            <trim prefix="charging_up_type =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.chargingUpType !=null ">
                        when id = #{item.id}
                        then #{item.chargingUpType}
                    </if>
                </foreach>
            </trim>
            <trim prefix="charging_up_unit =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.chargingUpUnit !=null ">
                        when id = #{item.id}
                        then #{item.chargingUpUnit}
                    </if>
                </foreach>
            </trim>
            <trim prefix="smart_charging_mode =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.smartChargingMode !=null ">
                        when id = #{item.id}
                        then #{item.smartChargingMode}
                    </if>
                </foreach>
            </trim>
            <trim prefix="time_setting_mode =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.timeSettingMode !=null ">
                        when id = #{item.id}
                        then #{item.timeSettingMode}
                    </if>
                </foreach>
            </trim>
            <trim prefix="time_setting_detail =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.timeSettingDetail !=null ">
                        when id = #{item.id}
                        then #{item.timeSettingDetail}
                    </if>
                </foreach>
            </trim>
            <trim prefix="location_id =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.locationId !=null ">
                        when id = #{item.id}
                        then #{item.locationId}
                    </if>
                </foreach>
            </trim>
            <trim prefix="phase_num =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.phaseNum !=null ">
                        when id = #{item.id}
                        then #{item.phaseNum}
                    </if>
                </foreach>
            </trim>
            <trim prefix="allocation_strategy =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.allocationStrategy !=null ">
                        when id = #{item.id}
                        then #{item.allocationStrategy}
                    </if>
                </foreach>
            </trim>
            <trim prefix="load_type =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.loadType !=null ">
                        when id = #{item.id}
                        then #{item.loadType}
                    </if>
                </foreach>
            </trim>
            <trim prefix="security_enabled =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.securityEnabled !=null ">
                        when id = #{item.id}
                        then #{item.securityEnabled}
                    </if>
                </foreach>
            </trim>
            <trim prefix="meter_location =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    when id = #{item.id}
                    then #{item.meterLocation}
                </foreach>
            </trim>
            <trim prefix="energy_use_strategy =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.energyUseStrategy !=null ">
                        when id = #{item.id}
                        then #{item.energyUseStrategy}
                    </if>
                </foreach>
            </trim>
            <trim prefix="offline_value =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    when id = #{item.id}
                    then #{item.offlineValue}
                </foreach>
            </trim>
            <trim prefix="min_reserve =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    when id = #{item.id}
                    then #{item.minReserve}
                </foreach>
            </trim>
            <trim prefix="tariff_id =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    when id = #{item.id}
                    then #{item.tariffId}
                </foreach>
            </trim>
            <trim prefix="favor =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    when id = #{item.id}
                    then #{item.favor}
                </foreach>
            </trim>
            <trim prefix="plan_time =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    when id = #{item.id}
                    then #{item.planTime}
                </foreach>
            </trim>
            <trim prefix="meter_id =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    when id = #{item.id}
                    then #{item.meterId}
                </foreach>
            </trim>
            <trim prefix="priority =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.priority !=null ">
                        when id = #{item.id}
                        then #{item.priority}
                    </if>
                </foreach>
            </trim>
            <trim prefix="merchant_id =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.merchantId !=null ">
                        when id = #{item.id}
                        then #{item.merchantId}
                    </if>
                </foreach>
            </trim>
            <trim prefix="scene =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.scene !=null ">
                        when id = #{item.id}
                        then #{item.scene}
                    </if>
                </foreach>
            </trim>
            <trim prefix="overload_fuse =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.overloadFuse !=null ">
                        when id = #{item.id}
                        then #{item.overloadFuse}
                    </if>
                </foreach>
            </trim>
            <trim prefix="meter_voltage =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.meterVoltage !=null ">
                        when id = #{item.id}
                        then #{item.meterVoltage}
                    </if>
                </foreach>
            </trim>
            <trim prefix="power_equipment_start_time =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.powerEquipmentStartTime !=null ">
                        when id = #{item.id}
                        then #{item.powerEquipmentStartTime}
                    </if>
                </foreach>
            </trim>
            <trim prefix="power_equipment_up =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.powerEquipmentUp !=null ">
                        when id = #{item.id}
                        then #{item.powerEquipmentUp}
                    </if>
                </foreach>
            </trim>
            <trim prefix="electric_up =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.electricUp !=null ">
                        when id = #{item.id}
                        then #{item.electricUp}
                    </if>
                </foreach>
            </trim>
            <trim prefix="power_equipment_enabled =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.powerEquipmentEnabled !=null ">
                        when id = #{item.id}
                        then #{item.powerEquipmentEnabled}
                    </if>
                </foreach>
            </trim>
            <trim prefix="up_duration =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.upDuration !=null ">
                        when id = #{item.id}
                        then #{item.upDuration}
                    </if>
                </foreach>
            </trim>
            <trim prefix="group_type =case" suffix="end,">
                <foreach collection="list" item="item" index="index">
                    <if test="item.groupType !=null ">
                        when id = #{item.id}
                        then #{item.groupType}
                    </if>
                </foreach>
            </trim>
        </trim>
        where
        id in
        <foreach collection="list" item="item" index="index" separator="," open="(" close=")">
            #{item.id}
        </foreach>
    </update>
    <update id="updateBatchGroupType">
        update op_location_pile_group set group_type=#{groupType} where id in
        <foreach collection="set" item="id" open ="(" close =")"  separator=",">
            #{id}
        </foreach>
    </update>

    <select id="findGroupId" resultType="java.lang.Long" parameterType="com.autel.cloud.pile.base.dto.OpLocationPileGroupParamDTO">
        select id
        from op_location_pile_group
        where location_id = #{dto.locationId}
        and deleted = 0
        <if test="dto.searchValue != null and dto.searchValue != ''">
            and LOCATE(#{dto.searchValue},`name`) > 0
        </if>
        <if test="dto.loadType != null">
            and load_type = #{dto.loadType}
        </if>
    </select>

    <select id="findGroupIdV3" resultType="java.lang.Long" parameterType="com.autel.cloud.pile.base.dto.PileGroupParamDTO">
        select id
        from op_location_pile_group
        <where>
        deleted = 0
        and merchant_id = #{dto.merchantId}
        <if test="dto.searchValue != null and dto.searchValue != ''">
            and LOCATE(#{dto.searchValue},`name`) > 0
        </if>
        <if test="dto.groupName != null and dto.groupName != ''">
            and LOCATE(#{dto.groupName},`name`) > 0
        </if>
        <if test="dto.loadType != null">
            and load_type = #{dto.loadType}
        </if>
        </where>
    </select>

    <select id="findOrdinaryRoot" resultType="java.lang.Long">
        SELECT T2.id
        FROM (SELECT @r AS _id,
        (SELECT @r := pid FROM op_location_pile_group WHERE id = _id ) AS pid,
        @l := @l + 1 AS lvl
              FROM
                  (SELECT @r := #{id}, @l := 0) vars,
                  op_location_pile_group h
              WHERE @r &lt;&gt; 0) T1
                 JOIN op_location_pile_group T2
                      ON T1._id = T2.id
        ORDER BY T1.lvl DESC;
    </select>
    <select id="findGroupIdWithPid" resultType="java.lang.Long">
        select id
        from op_location_pile_group
        where
        location_id = #{locationId}
        and
        deleted = 0
        and pid = #{pid}
        <if test="self != null ">
            and id != #{self}
        </if>
    </select>

    <select id="findGroupIdByPidAndMerchantId" resultType="java.lang.Long">
        select id
        from op_location_pile_group
        where
        merchant_id = #{merchantId}
        and
        deleted = 0
        and pid = #{pid}
        <if test="self != null ">
            and id != #{self}
        </if>
    </select>

    <select id="findGroupIdByPid" resultType="java.lang.Long">
        select id
        from op_location_pile_group
        where
        merchant_id = #{merchantId}
        and
        deleted = 0
        and pid = #{pid}
        <if test="self != null ">
            and id != #{self}
        </if>
    </select>

    <resultMap id="baseMap" type="com.autel.cloud.pile.base.infrastructure.mapper.entity.OpLocationPileGroupEntity">
        <result property="level" column="level"></result>
        <result property="id" column="id"></result>
        <result property="pid" column="pid"></result>
        <result property="createdAt" column="created_at"></result>
        <result property="updatedAt" column="updated_at"></result>
        <result property="deleted" column="deleted"></result>
        <result property="status" column="status"></result>
        <result property="note" column="note"></result>
        <result property="name" column="name"></result>
        <result property="energyUseStrategy" column="energy_use_strategy"></result>
        <result property="chargingUp" column="charging_up"></result>
        <result property="chargingUpType" column="charging_up_type"></result>
        <result property="chargingUpUnit" column="charging_up_unit"></result>
        <result property="smartChargingMode" column="smart_charging_mode"></result>
        <result property="timeSettingMode" column="time_setting_mode"></result>
        <result property="timeSettingDetail" column="time_setting_detail"></result>
        <result property="locationId" column="location_id"></result>
        <result property="merchantId" column="merchant_id"></result>
        <result property="phaseNum" column="phase_num"></result>
        <result property="allocationStrategy" column="allocation_strategy"></result>
        <result property="loadType" column="load_type"></result>
        <result property="energyUseStrategy" column="energy_use_strategy"></result>
        <result property="tariffId" column="level"></result>
        <result property="favor" column="favor"></result>
        <result property="planTime" column="plan_time"></result>
        <result property="meterId" column="meter_id"></result>
        <result property="priority" column="priority"></result>
        <result property="meterLocation" column="meter_location"></result>
        <result property="securityEnabled" column="security_enabled"></result>
        <result property="offlineValue" column="offline_value"></result>
        <result property="upDuration" column="up_duration"></result>
        <result property="overloadFuse" column="overload_fuse"></result>
        <result property="powerEquipmentUp" column="power_equipment_up"></result>
        <result property="powerEquipmentStartTime" column="power_equipment_start_time"></result>
        <result property="meterVoltage" column="meter_voltage"></result>
        <result property="electricUp" column="electric_up"></result>
        <result property="powerEquipmentEnabled" column="power_equipment_enabled"></result>
        <result property="prices" column="prices"
                typeHandler="com.baomidou.mybatisplus.extension.handlers.FastjsonTypeHandler"></result>
        <result property="minReserve" column="min_reserve"></result>
    </resultMap>

    <select id="findChildren"
            resultMap="baseMap">
        SELECT T2.level_ as level,
               T3.id,
               T3.pid,
               T3.created_at,
               T3.updated_at,
               T3.deleted,
               T3.status,
               T3.note,
               T3.name,
               T3.use_smart_charging,
               T3.charging_up,
               T3.charging_up_type,
               T3.charging_up_unit,
               T3.smart_charging_mode,
               T3.time_setting_mode,
               T3.time_setting_detail,
               T3.location_id,
               T3.merchant_id,
               T3.phase_num,
               T3.allocation_strategy,
               T3.load_type,
               T3.energy_use_strategy,
               T3.tariff_id,
               T3.favor,
               T3.plan_time,
               T3.meter_id,
               T3.priority,
               T3.meter_location,
               T3.security_enabled,
               T3.offline_value,
               T3.up_duration,
               T3.overload_fuse,
               T3.power_equipment_enabled,
               T3.electric_up,
               T3.power_equipment_start_time,
               T3.power_equipment_up,
               T3.meter_voltage,
               T3.scene,
               T3.prices,
               T3.min_reserve
        FROM (SELECT @ids as _ids,
                    ( SELECT @ids := GROUP_CONCAT(id)
                        FROM op_location_pile_group
                       WHERE FIND_IN_SET(pid, @ids)
                    ) as T1,
                   @l := @l+1 as level_
              FROM op_location_pile_group,
                  (SELECT @ids := #{id}, @l := -1 ) T4
              WHERE @ids IS NOT NULL) T2,
             op_location_pile_group T3
        WHERE FIND_IN_SET(T3.id, T2._ids)
          AND T3.deleted = 0
        <if test="status != null">
            AND T3.status = #{status}
        </if>
        ORDER BY level_, id
    </select>
    <select id="findName"
            resultType="com.autel.cloud.pile.base.infrastructure.mapper.entity.OpLocationPileGroupEntity">
        SELECT g.name, g.id,g.energy_use_strategy,g.status,g.charging_up_unit,g.location_id,g.allocation_strategy
        FROM op_location_pile_group g
                 LEFT JOIN op_location_pile_group_associate a ON a.group_id = g.id
        WHERE a.deleted = 0
          AND g.deleted = 0
          AND a.pile_sn = #{pileSn}
    </select>
    <select id="countEdgeGroupId" resultType="java.lang.Integer">
        <![CDATA[
         WITH RECURSIVE tmp AS (
                SELECT id,pid,name,meter_id,group_type
                FROM op_location_pile_group
                WHERE id = #{groupId} and deleted=0
                UNION ALL
                SELECT e.id,e.pid,e.name,e.meter_id,e.group_type
                FROM op_location_pile_group e
                INNER JOIN tmp s ON e.pid = s.id where e.deleted=0
        )
        SELECT count(1) FROM tmp t left join op_location_meter m on m.id=t.meter_id where m.brand_enum=0 or t.group_type=1
        ]]>
    </select>
    <select id="selectChildIds" resultType="java.lang.Long">
        <![CDATA[
    		WITH RECURSIVE tmp AS (
                SELECT id,pid,group_type
                FROM op_location_pile_group
                WHERE id = #{groupId} and deleted=0
                UNION ALL
                SELECT e.id,e.pid,e.group_type
                FROM op_location_pile_group e
                INNER JOIN tmp s ON e.pid = s.id where e.deleted=0
        )
        SELECT id FROM tmp where 1=1
        ]]>
        <if test="groupTypes != null and groupTypes.size > 0" >
            and group_type in
            <foreach collection="groupTypes" item="item" open ="(" close =")"  separator=",">
                 #{item}
            </foreach>
        </if>
        <if test="!hasRoot">
            and pid>0
        </if>
    </select>
</mapper>
